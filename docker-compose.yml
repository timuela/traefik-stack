networks:
  interconnection:
    external: true
    name: interconnection-network
    driver: bridge
services:
  qbittorrent:
    container_name: qbittorrent
    image: lscr.io/linuxserver/qbittorrent:latest
    ports:
      - 8080:8080
      - 6881:6881
      - 6881:6881/udp
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${HOME_CONFIGS_DIR}/qBittorrent:/config
      - ${DATA_DIR}/qBittorrentDownloads:/downloads
    networks:
      - interconnection
  sonarr:
    container_name: sonarr
    image: lscr.io/linuxserver/sonarr:latest
    ports:
      - 8081:8989
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${HOME_CONFIGS_DIR}/sonarr:/config
      - ${DATA_DIR}/TVSeries:/tv
      - ${DATA_DIR}/qBittorrentDownloads:/downloads
    networks:
      - interconnection
  radarr:
    container_name: radarr
    image: lscr.io/linuxserver/radarr:latest
    ports:
      - 8082:7878
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${HOME_CONFIGS_DIR}/radarr:/config
      - ${DATA_DIR}/Movies:/movies
      - ${DATA_DIR}/qBittorrentDownloads:/downloads
    networks:
      - interconnection
  overseerr:
    container_name: overseerr
    image: sctx/overseerr
    ports:
      - 8083:5055
    restart: unless-stopped
    environment:
      - LOG-LEVEL=debug
      - TZ=${TZ}
    volumes:
      - ${HOME_CONFIGS_DIR}/overseerr:/app/config
    dns:
      - 1.1.1.1
      - 1.0.0.1
    networks:
      - interconnection
  plex:
    container_name: plex
    image: plexinc/pms-docker
    ports:
      - 8084:32400/tcp
      - 8324:8324/tcp
      - 32469:32469/tcp
      - 1900:1900/udp
      - 32410:32410/udp
      - 32412:32412/udp
      - 32413:32413/udp
      - 32414:32414/udp
    restart: unless-stopped
    environment:
      - TZ=${TZ}
      - PLEX_CLAIM=${PLEX_CLAIM}
      - ADVERTISE_IP=https://plex.${DOMAIN_MAIN}:443
    hostname: RavenZ
    volumes:
      - ${HOME_CONFIGS_DIR}/plex:/config
      - ${HOME_CONFIGS_DIR}/plex/transcode:/transcode
      - ${DATA_DIR}/Movies:/movies
      - ${DATA_DIR}/TVSeries:/tvseries
    networks:
      - interconnection
  jackett:
    container_name: jackett
    image: lscr.io/linuxserver/jackett:latest
    ports:
      - 8085:9117
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${HOME_CONFIGS_DIR}/jackett:/config
      - ${HOME_CONFIGS_DIR}/jackett/blackhole:/downloads
    networks:
      - interconnection
  jellyfin:
    container_name: jellyfin
    image: lscr.io/linuxserver/jellyfin:latest
    ports:
      - 8086:8096
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${HOME_CONFIGS_DIR}/jellyfin:/config
      - ${DATA_DIR}/TVSeries:/data/tvshows
      - ${DATA_DIR}/Movies:/data/movies
    networks:
      - interconnection
  flaresolverr:
    container_name: flaresolverr
    # image: ghcr.io/flaresolverr/flaresolverr:latest
    image: alexfozor/flaresolverr:pr-1300-experimental
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-debug}
      - LOG_HTML=${LOG_HTML:-false}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
      - TZ=${TZ}
    ports:
      - 8087:8191
    restart: unless-stopped
    networks:
      - interconnection
  portainer:
    container_name: portainer
    image: portainer/portainer-ce:2.20.1
    ports:
      - 8000:8000
      - 8088:9000
    volumes:
      - ${HOME_CONFIGS_DIR}/portainer/data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    networks:
      - interconnection
  bazarr:
    container_name: bazarr
    image: lscr.io/linuxserver/bazarr:latest
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${HOME_CONFIGS_DIR}/bazarr:/config
      - ${DATA_DIR}/Movies:/movies
      - ${DATA_DIR}/TVSeries:/tv
    ports:
      - 8089:6767
    restart: unless-stopped
    networks:
      - interconnection
  traefik-reverse-proxy:
    container_name: traefik
    image: traefik:latest
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    ports:
      - 80:80
      - 443:443
      - 8090:8080
    volumes:
      - ${HOME_CONFIGS_DIR}/traefik/letsencrypt:/letsencrypt
      - ${HOME_CONFIGS_DIR}/traefik/configs:/etc/traefik
      - /var/log/traefik:/var/log/traefik
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    networks:
      - interconnection
  # Grafana Stack
  grafana-alloy:
    container_name: grafana-alloy
    image: grafana/alloy:latest
    environment:
      - ${HOME_CONFIGS_DIR}/alloy:/etc/alloy/config.alloy
    ports:
      - 12345:12345
    restart: unless-stopped
    command: >
      -server.http.listen-addr=0.0.0.0:12345 -storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    # - GCLOUD_FM_URL="${GCLOUD_FM_URL}" GCLOUD_FM_POLL_FREQUENCY="${GCLOUD_FM_POLL_FREQUENCY}" GCLOUD_FM_HOSTED_ID="${GCLOUD_FM_HOSTED_ID}" ARCH="${ARCH}" GCLOUD_RW_API_KEY="${GCLOUD_RW_API_KEY}" /bin/sh -c "$(curl -fsSL https://storage.googleapis.com/cloud-onboarding/alloy/scripts/install-linux.sh)"
    networks:
      - interconnection
  grafana-pdc-agent:
    container_name: grafana-pdc-agent
    image: grafana/pdc-agent:latest
    command: >
      -token ${PDC_AGENT_TOKEN} -cluster ${PDC_AGENT_CLUSTER} -gcloud-hosted-grafana-id ${PDC_AGENT_GRAFANA_ID}
    restart: unless-stopped
    networks:
      - interconnection
  grafana:
    container_name: grafana
    image: grafana/grafana-enterprise
    user: "1000"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - GF_INSTALL_PLUGINS=grafana-clock-panel
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
    ports:
      - 8091:3000
    volumes:
      - ${HOME_CONFIGS_DIR}/grafana:/var/lib/grafana
      - ${HOME_CONFIGS_DIR}/grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped
    networks:
      - interconnection
  prometheus:
    container_name: prometheus
    image: prom/prometheus
    user: root
    ports:
      - 8092:9090
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
      - --storage.tsdb.retention.time=7d
    volumes:
      - ${HOME_CONFIGS_DIR}/prometheus:/etc/prometheus
      - ${HOME_CONFIGS_DIR}/prometheus/data:/prometheus
    restart: unless-stopped
    networks:
      - interconnection
  loki:
    container_name: loki
    image: grafana/loki:2.9.4
    ports:
      - 8093:3100
    command: -config.file=/etc/loki/loki-config.yml
    volumes:
      - ${HOME_CONFIGS_DIR}/loki:/etc/loki
    restart: unless-stopped
    networks:
      - interconnection
  promtail:
    container_name: promtail
    image: grafana/promtail:2.9.4
    command: -config.file=/etc/promtail/promtail-config.yml
    user: root
    volumes:
      - /var/log:/var/log
      - ${HOME_CONFIGS_DIR}/promtail:/etc/promtail
    restart: unless-stopped
    networks:
      - interconnection
  node-exporter:
    container_name: node-exporter
    image: prom/node-exporter:latest
    ports:
      - 8094:9100
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    networks:
      - interconnection
  filebrowser:
    container_name: filebrowser
    image: filebrowser/filebrowser:s6
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    ports:
      - 8095:80
    volumes:
      - ${HOME_CONFIGS_DIR}/filebrowser/config/settings.json:/config/settings.json
      - ${HOME_CONFIGS_DIR}/filebrowser/database/filebrowser.db:/database/filebrowser.db
      - ${DATA_DIR}:/srv
    restart: unless-stopped
    networks:
      - interconnection
  # Port 8096 is used by jenkins
  dashy:
    container_name: dashy
    image: lissy93/dashy
    volumes:
      - ${HOME_CONFIGS_DIR}/dashy:/app/user-data
    ports:
      - 8097:8080
    environment:
      - UID=1000
      - GID=1000
    healthcheck:
      test: [ 'CMD', 'node', '/app/services/healthcheck' ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - interconnection
  lidarr:
    image: lscr.io/linuxserver/lidarr:latest
    container_name: lidarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${HOME_CONFIGS_DIR}/lidarr/config:/config
      - ${HOME_CONFIGS_DIR}/lidarr/music:/music
      - ${HOME_CONFIGS_DIR}/lidarr/downloads:/downloads
    ports:
      - 8098:8686
    restart: unless-stopped
    networks:
      - interconnection
