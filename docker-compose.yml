networks:
  interconnection:
    name: interconnection-network
    driver: bridge
    external: true
services:
#Sonarr
  sonarr:
    container_name: sonarr
    image: lscr.io/linuxserver/sonarr:latest
    ports:
      - 8081:8989
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${HOME_CONFIGS_DIR}/sonarr:/config
      - ${DATA_DIR}/TVSeries:/tv
      - ${DATA_DIR}/qBittorrentDownloads:/downloads
    networks:
      - interconnection
#Radarr
  radarr:
    container_name: radarr
    image: lscr.io/linuxserver/radarr:latest
    ports:
      - 8082:7878
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${HOME_CONFIGS_DIR}/radarr:/config
      - ${DATA_DIR}/Movies:/movies
      - ${DATA_DIR}/qBittorrentDownloads:/downloads
    networks:
      - interconnection
#Jellyseerr
  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    environment:
      - LOG_LEVEL=debug
      - TZ=${TZ}
    ports:
      - 8083:5055
    volumes:
      - ${HOME_CONFIGS_DIR}/jellyseerr:/app/config
    restart: unless-stopped
    networks:
      - interconnection
#Jackett
  jackett:
    container_name: jackett
    image: lscr.io/linuxserver/jackett:latest
    ports:
      - 8084:9117
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${HOME_CONFIGS_DIR}/jackett:/config
      - ${HOME_CONFIGS_DIR}/jackett/blackhole:/downloads
    networks:
      - interconnection
#Jellyfin
  jellyfin:
    container_name: jellyfin
    image: lscr.io/linuxserver/jellyfin:latest
    ports:
      - 8085:8096
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${HOME_CONFIGS_DIR}/jellyfin:/config
      - ${DATA_DIR}/TVSeries:/data/tvshows
      - ${DATA_DIR}/Movies:/data/movies
    networks:
      - interconnection
#Flaresolverr
  flaresolverr:
    container_name: flaresolverr
    image: alexfozor/flaresolverr:pr-1300-experimental
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-debug}
      - LOG_HTML=${LOG_HTML:-false}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
      - TZ=${TZ}
    ports:
      - 8086:8191
    restart: unless-stopped
    networks:
      - interconnection
#Portainer
  portainer:
    container_name: portainer
    image: portainer/portainer-ce:2.20.1
    ports:
      # - 8000:8000
      - 8087:9000
    volumes:
      - ${HOME_CONFIGS_DIR}/portainer/data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    networks:
      - interconnection
#Bazarr
  bazarr:
    container_name: bazarr
    image: lscr.io/linuxserver/bazarr:latest
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${HOME_CONFIGS_DIR}/bazarr:/config
      - ${DATA_DIR}/Movies:/movies
      - ${DATA_DIR}/TVSeries:/tv
    ports:
      - 8088:6767
    restart: unless-stopped
    networks:
      - interconnection
#Lidarr
  lidarr:
    image: lscr.io/linuxserver/lidarr:latest
    container_name: lidarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${HOME_CONFIGS_DIR}/lidarr/config:/config
      - ${HOME_CONFIGS_DIR}/lidarr/music:/music
      - ${HOME_CONFIGS_DIR}/lidarr/downloads:/downloads
    ports:
      - 8089:8686
    restart: unless-stopped
    networks:
      - interconnection
#FileBrowser
  filebrowser:
    container_name: filebrowser
    image: filebrowser/filebrowser:s6
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    ports:
      - 8090:80
    volumes:
      - ${HOME_CONFIGS_DIR}/filebrowser/config/settings.json:/config/settings.json
      - ${HOME_CONFIGS_DIR}/filebrowser/database/filebrowser.db:/database/filebrowser.db
      - ${DATA_DIR}:/srv
    restart: unless-stopped
    networks:
      - interconnection
#Dashy
  dashy:
    container_name: dashy
    image: lissy93/dashy
    volumes:
      - ${HOME_CONFIGS_DIR}/dashy:/app/user-data
    ports:
      - 8091:8080
    environment:
      - UID=1000
      - GID=1000
    healthcheck:
      test: [ 'CMD', 'node', '/app/services/healthcheck' ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - interconnection
#Qbittorent
  qbittorrent:
    container_name: qbittorrent
    image: lscr.io/linuxserver/qbittorrent:latest
    ports:
      - 8092:8080
      # - 6881:6881
      # - 6881:6881/udp
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${HOME_CONFIGS_DIR}/qBittorrent:/config
      - ${DATA_DIR}/qBittorrentDownloads:/downloads
    networks:
      - interconnection
  # Port 8096 is being used by jenkins
#Traefik
  traefik-reverse-proxy:
    container_name: traefik
    image: traefik:latest
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    ports:
      - 80:80
      - 443:443
      # - 9090:8080
    volumes:
      - ${HOME_CONFIGS_DIR}/traefik/letsencrypt:/letsencrypt
      - ${HOME_CONFIGS_DIR}/traefik/configs:/etc/traefik
      - /var/log/traefik:/var/log/traefik
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    networks:
      - interconnection
#MongoDB
  mongodb:
    container_name: mongodb
    image: mongo:latest
    restart: unless-stopped
    ports:
      - 27017:27017
    volumes:
      - ${HOME_CONFIGS_DIR}/mongodb:/data/db
    networks:
      - interconnection
#Upsnap
  upsnap:
    container_name: upsnap
    image: seriousm4x/upsnap:latest
    network_mode: host
    restart: unless-stopped
    volumes:
      - ${HOME_CONFIGS_DIR}/upsnap/data:/app/pb_data
    # # To use a non-root user, create the mountpoint first (mkdir data) so that it has the right permission.
    # user: 1000:1000
    ports:
      - 8093:8093
    environment:
      - TZ=${TZ}
    # dns is used for name resolution during network scan
    dns:
      - 192.18.0.1
      - 192.18.0.2
    # # you can change the listen ip:port inside the container like this:
    entrypoint: /bin/sh -c "./upsnap serve --http 0.0.0.0:8093"
    healthcheck:
      test: curl -fs "http://localhost:8093/api/health" || exit 1
      interval: 10s
    # # or install custom packages for shutdown
    # entrypoint: /bin/sh -c "apk update && apk add --no-cache <YOUR_PACKAGE> && rm -rf /var/cache/apk/* && ./upsnap serve --http 0.0.0.0:8090"